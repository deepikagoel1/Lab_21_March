# -*- coding: utf-8 -*-
"""laksh_linear_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B6oTj9RfhrNzIVwm1w3wcO2vaXi__zZc
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error
import operator

atmosphere_data = pd.read_csv('atmosphere_data1.csv')
print(atmosphere_data.head())
print(atmosphere_data.shape)

"""### Finding correlation between all the attributes"""

atmosphere_data.corr()

"""## Observations

#### We can observe that only humidity has a correlation value greater than 0.2 with temperature.
Therefore, we will use ***humidity as the only independent*** variable for building our linear and polynomial regressors
"""

# Null check
print(atmosphere_data.isnull().sum())
# print(atmosphere_data["humidity"].isnull().sum())

selected_input_columns = []

for col in atmosphere_data.columns:
    if (col != 'temperature') and atmosphere_data[col].corr(atmosphere_data['temperature']) > 0.2:
        selected_input_columns.append(col)

print("selected columns:",selected_input_columns)

X = atmosphere_data[selected_input_columns]
Y = atmosphere_data["temperature"]

# split data into training and test samples
x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=5, shuffle=True)

"""# Linear Regression"""

# Build Linear regression model

# model = LinearRegression()
# model.fit(x_train, y_train)

# Predict training and testing values

# predicted_training_vals = model.predict(x_train)
# predicted_test_vals = model.predict(x_test)

# Calculate RMSE

# mse_train = mean_squared_error(y_train, predicted_training_vals)
# rmse_train = np.sqrt(mse_train)
# print(f"RMSE for training data: {rmse_train}")

# mse_test = mean_squared_error(y_test, predicted_test_vals)
# rmse_test = np.sqrt(mse_test)
# print(f"\nRMSE for test data: {rmse_test}")

# Plot the regression line

# plt.figure(figsize=[20,10])
# plt.scatter(x_train, y_train, c="red")
# plt.plot(x_train, predicted_training_vals, c='blue')
# plt.xlabel('humidity')
# plt.ylabel('temperature')
# plt.show()

"""# Polynomial Regression"""

# getting the vars ready
y_pred_test = {}
y_pred_train = {}

rmse_test = {}
rmse_train = {}

# Build models for varying degree of polynomial

for d in range(1,10):
    poly_features = PolynomialFeatures(degree=d)
    x_poly = poly_features.fit_transform(x_train)
    print(f"For degree = {d}, shape of polinomial features = {x_poly.shape}")
    lr_model = LinearRegression()
    lr_model.fit(x_poly, y_train) # model will be trained

    ypred_test = lr_model.predict(poly_features.fit_transform(x_test))
    y_pred_test[d] = ypred_test

    ypred_train = lr_model.predict(poly_features.fit_transform(x_train))
    y_pred_train[d] = ypred_train

    # calculate rmse
    mse_test = mean_squared_error(y_test, ypred_test)
    rmse_test[d] = np.sqrt(mse_test)

    mse_train = mean_squared_error(y_train, ypred_train)
    rmse_train[d] = np.sqrt(mse_train)

# find minimum rmse value and currosponding poly degree
print(f"rmse_test = {rmse_test}")
best_degree_test = min(rmse_test, key=rmse_test.get)
print(f"\nFor degree = {best_degree_test}, RMSE = {rmse_test[best_degree_test]}")

print(f"\nrmse_train = {rmse_train}")
best_degree_train = min(rmse_train, key=rmse_train.get)
print(f"\nFor degree = {best_degree_train}, RMSE = {rmse_train[best_degree_train]}")

"""### Plot the polynomial curve for best degree"""

# x_to_plot = x_test.copy()
# ypred_to_plot = y_pred_test[1].copy()

# # plt.figure(figsize=[20,15])
# plt.scatter(x_test, y_test, c="red")

# sort_axis = operator.itemgetter(0)
# sorted_zip = sorted(zip(x_to_plot, ypred_to_plot),key = sort_axis)
# x_to_plot, ypred_to_plot = zip(*sorted_zip)

# plt.plot(x_to_plot, ypred_to_plot, c="blue")
# plt.show()

x_to_plot = x_train.copy()
ypred_to_plot = y_pred_train[9].copy()
print(x_to_plot.shape)
print(ypred_to_plot.shape)

# plt.figure(figsize=[20,15])
plt.scatter(x_train, y_train, c="red")

sort_axis = operator.itemgetter(0)
sorted_zip = sorted(zip(x_to_plot, ypred_to_plot), key=sort_axis)
x_to_plot, ypred_to_plot = zip(*sorted_zip)

plt.plot(x_to_plot, ypred_to_plot, c="blue")

plt.xlabel("Humidity")
plt.ylabel("Temperature")
plt.title("Best fit curve on the training data")

plt.show()

